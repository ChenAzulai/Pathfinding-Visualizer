{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","row","isStart","isFinish","isWall","isVisited","onMouseUp","onMouseDown","onMouseEnter","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getUnvisitedNeighbors","prevNode","PathfindingVisualizer","state","mouseIsPressed","pressedNodeType","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","startRow","startCol","finishRow","finishCol","getInitGrid","setState","console","log","newGrid","getNewGridStartChanged","getNewGridWithWallToggle","nodesInShortestPath","i","setTimeout","animateShorterPath","nodeProp","document","getElementById","orderedShortestPath","currNode","undefined","getNodesInShortestPath","animateDijkstra","window","location","reload","href","onClick","visualizeDijkstra","clean","map","rowInd","nodeInd","handleMouseDown","handleMouseEnter","handleMouseUp","currRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.3a500ac0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css'\r\n\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            col,\r\n            row,\r\n            isStart,\r\n            isFinish,\r\n            isVisited,\r\n            isWall,\r\n            onMouseUp,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n        } = this.props;\r\n        const extraClassName =\r\n            isFinish ? 'node-finish'\r\n                : isStart ? 'node-start'\r\n                : isWall ? 'node-wall'\r\n                    : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseUp={() => onMouseUp(row,col)}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}/>\r\n        );\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n        return false;\r\n    }\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        if (closestNode.isWall) continue;\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const neighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of neighbors) {\r\n        neighbor.isVisited = true;\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.prevNode = node;\r\n    }\r\n\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPath(finishNode) {\r\n    const orderedShortestPath = [];\r\n    let currNode = finishNode;\r\n    while (currNode !== undefined) {\r\n        orderedShortestPath.push(currNode);\r\n        currNode = currNode.prevNode;\r\n    }\r\n    return orderedShortestPath;\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node'\r\nimport {dijkstra, getNodesInShortestPath} from '../algorithms/dijkstra'\r\nimport './PathfindingVisualizer.css'\r\n\r\n// const startNodeRow = 10;\r\n// const startNodeCol = 15;\r\n// const finishNodeRow = 10;\r\n// const finishNodeCol = 35;\r\n//\r\nconst GRID_LENGTH = 50;\r\nconst GRID_HEIGHT = 20;\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            pressedNodeType: '',\r\n            startNodeRow: 10,\r\n            startNodeCol: 15,\r\n            finishNodeRow: 10,\r\n            finishNodeCol: 35,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const startRow = this.state.startNodeRow;\r\n        const startCol = this.state.startNodeCol;\r\n        const finishRow = this.state.finishNodeRow;\r\n        const finishCol = this.state.finishNodeCol;\r\n        const grid = getInitGrid(startRow, startCol, finishRow, finishCol);\r\n        this.setState({grid});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        // console.log('handleMouseDown', row, col);\r\n        // console.log('state', this.state.startNodeRow, this.state.startNodeCol);\r\n        console.log('Down ', this.state.startNodeRow, this.state.startNodeCol, row, col);\r\n\r\n        if (this.state.grid[row][col].isStart) {\r\n            const newGrid = getNewGridStartChanged(this.state.grid, row, col);\r\n            this.setState({grid: newGrid, pressedNodeType: 'start', mouseIsPressed: true});\r\n\r\n        } else {\r\n            console.log('here');\r\n            const newGrid = getNewGridWithWallToggle(this.state.grid, row, col);\r\n            this.setState({grid: newGrid, mouseIsPressed: true});\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        let newGrid;\r\n        if (this.state.pressedNodeType !== 'start') {\r\n            console.log('here1');\r\n            newGrid = getNewGridWithWallToggle(this.state.grid, row, col);\r\n            this.setState({grid: newGrid});\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row, col) {\r\n        let newGrid;\r\n        if (this.state.pressedNodeType === 'start') {\r\n            newGrid = getNewGridStartChanged(this.state.grid, row, col);\r\n\r\n            this.setState({\r\n                grid: newGrid,\r\n                mouseIsPressed: false,\r\n                pressedNodeType: '',\r\n                startNodeRow: row,\r\n                startNodeCol: col,\r\n            });\r\n\r\n        } else\r\n            this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPath) {\r\n\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShorterPath(nodesInShortestPath);\r\n                }, 10 * i)\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nodeProp = this.state.grid[node.row][node.col];\r\n                if (!nodeProp.isStart && !nodeProp.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = `node node-visited`;\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n\r\n    animateShorterPath(nodesInShortestPath) {\r\n        for (let i = 0; i < nodesInShortestPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPath[i];\r\n                const nodeProp = this.state.grid[node.row][node.col];\r\n                if (!nodeProp.isStart && !nodeProp.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = `node node-shortest-path`;\r\n            }, 15 * i);\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\r\n        const finishNode = grid[this.state.finishNodeRow][this.state.finishNodeCol];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPath = getNodesInShortestPath(finishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n    }\r\n\r\n    clean() {\r\n        window.location.reload();\r\n    }\r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n        return (\r\n            <>\r\n                <div className=\"toolbar\">\r\n                    <ul className=\"nav\">\r\n                        <li id=\"visualize-btn\">\r\n                            <a href=\"#\" onClick={() => this.visualizeDijkstra()}>\r\n                                Visualize Dijkstra's algorithm\r\n                            </a>\r\n                        </li>\r\n                        <li id=\"clean-btn\">\r\n                            <a href=\"#\" onClick={() => this.clean()}>\r\n                                clean\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowInd) => {\r\n                        return (<div key={rowInd}>\r\n                                {row.map((node, nodeInd) => {\r\n                                    const {col, row, isStart, isFinish, isWall, isVisited} = node;\r\n                                    return (\r\n                                        <Node key={nodeInd}\r\n                                              col={col}\r\n                                              row={row}\r\n                                              isStart={isStart}\r\n                                              isFinish={isFinish}\r\n                                              isVisited={isVisited}\r\n                                              isWall={isWall}\r\n                                              mouseIsPressed={mouseIsPressed}\r\n                                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                              onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                              onMouseUp={() => this.handleMouseUp(row, col)}\r\n                                        >\r\n                                        </Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst getInitGrid = (startRow, startCol, finishRow, finishCol) => {\r\n\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n        const currRow = [];\r\n        for (let col = 0; col < GRID_LENGTH; col++) {\r\n            currRow.push(createNode(col, row, startRow, startCol, finishRow, finishCol));\r\n        }\r\n        grid.push(currRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\n\r\nconst createNode = (col, row, startRow, startCol, finishRow, finishCol) => {\r\n\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === startRow && col === startCol,\r\n        isFinish: row === finishRow && col === finishCol,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n    };\r\n};\r\n\r\n\r\nconst getNewGridWithWallToggle = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}\r\n\r\nconst getNewGridStartChanged = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isStart: !node.isStart,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}","import './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}